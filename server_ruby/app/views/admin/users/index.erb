<div class="disflxcctr table-wrapper" style="flex:1; width:100%; overflow-x: scroll; padding:2em;">
    <% if !current_user %>
        <div style="color:red;font-size:1.5em;display:flex;justify-content:center;align-items:center,flex:1">
            Please sign in to use this feature.
        </div>
    <% elsif !current_user.admin? %>
        <div style="color:red;font-size:1.5em;display:flex;justify-content:center;align-items:center,flex:1">
            Improper permissions. Please consult with your administrator.
        </div>
    <% else %>
        <div style="flex:1; width:100%;">
            <div style="width:100%">
                <%= form_with url: admin_users_path, method: :get , local: true do |f| %>  <!-- has_one relationship -->
                    <div class="d-flex flex-row bg-secondary nochildlinks" >
                        <div class="disflxrstart" style="width:fit-content; align-items: center;">
                            <h5 class="text-white" style="font-size:1.5em; padding:.5em;" >Custom Query</h5>
                        </div>

                        <div class="disflxrctr" style="flex:1; justify-content: flex-end">
                            <div class="p-2 table-mgmt-opt">
                                <!--<%= button_to "Clear", export_admin_users_path(format: :csv), :class => "btn btn-md btn-dark p-2", :method => :get %> -->
                                <%= button_tag "Clear", :type => :button, :onclick => "clearCustomQuery(event)", :class => "btn btn-dark btn-md"%>
                            </div>
                            <div class="p-2 table-mgmt-opt">
                                <%= f.submit "Execute" , class: "btn btn-dark btn-md"%>
                            </div>
                        </div>
                    </div>

                    
                    <div style="width:100%; overflow-x:scroll">
                        <table class="table table-secondary table-striped" data-sort-order="asc" style="margin-bottom:0;" >
                            <thead>
                                <tr>
                                    <% @field_map.each do |k, v|%>
                                        <th> <%= k %> </th>
                                    <% end %>
                                </tr>
                            </thead>
                            <tbody>
                                <% for i in 0..@user_search.num_customs%>
                                    <tr>
                                        <% @field_map.each do |k, v|%>
                                            <td>
                                                <%= f.collection_select "query[#{k}][#{i}][operator]", @operators.keys, :to_s, :to_s, 
                                                    {:selected => @user_search.public_send(k.to_sym) && @user_search.public_send(k.to_sym)["#{i}"] ? 
                                                        @user_search.public_send(k.to_sym)["#{i}"][:operator] : :equal}
                                                %>
                                                <%= f.public_send(v[:field], "query[#{k}][#{i}][value]", autofocus: true, class: "query-field-sh", 
                                                    value: @user_search.public_send(k.to_sym) && @user_search.public_send(k.to_sym)["#{i}"] ? 
                                                        @user_search.public_send(k.to_sym)["#{i}"][:value] : nil, 
                                                    **v[:opts])
                                                %>
                                            </td>
                                        <% end %>
                                    </tr>
                                <% end %>
                                
                                <tr>
                                    <td colspan="<%= @field_map.size %>">
                                        <%= button_tag "Add Row", :type => :button, :onclick => "addCustomQuery(event)", :class => "btn btn-primary btn-md"%>
                                        <%= f.hidden_field :num_customs, :value => 1%>
                                    </td>
                                </tr>
                            </tbody>
                            
                        </table>
                        
                    </div>
                    <br/>
                    
                    <div style="display:flex; justify-content: space-between">
                        <%= f.collection_select :view, [25,50,100], :to_s, :to_s, {:selected => @page_limit}, onchange: 'this.form.submit()'%>
                        <%= render 'shared/page_inplinks', {:current_page => @page, :last_page => @last_page, :records => @users, :link_path => admin_users_path} %>
                    <% end %>
                    
                </div>
            </div>
            <br/>
   
            <div class="d-flex flex-row table-mgmt nochildlinks" >
                <div class="disflxrstart" style="width:fit-content;">
                    <h2 >User Management View</h2>
                </div>

                <div class="disflxrctr" style="flex:1; justify-content: flex-end">
                    <div class="p-2 table-mgmt-opt">
                        <%= button_to "Export CSV", export_admin_users_path(format: :csv), :class => "btn btn-success p-2", :method => :get %>
                    </div>
                    <div class="p-2 table-mgmt-opt">
                        <%= button_to "Add Users", new_admin_user_path, :class => "btn btn-success p-2", :method => :get %>
                    </div>
                </div>
            </div>
            
            <div style="width:100%; overflow-x:scroll">
                <table class="table table-dark table-striped table-bordered" data-sort-order="asc" style="margin-bottom:0;">
                    <thead>
                        <tr>
                            <% @field_map.each do |k, v|%>
                                <th> <%= k %> </th>
                            <% end %>
                            <th></th>
                        </tr>

                    </thead>
                    
                    <tbody>
                        <% if @users.length > 0 %>
                            <% @users.each do |entry| %>
                            <tr>
                                <% entry.attributes.each do |k, v|%>
                                    <td> <%= v %> </td>
                                <% end %>
                                <% if entry.employee %>
                                    <td>
                                        <%= link_to entry.employee.id, employee_path({:id => entry.employee}), method: :get%>
                                    </td>
                                <% else %>
                                    <td><%= link_to "Set", new_employee_path({:user_id => entry}), method: :get%></td>
                                <% end %>
                                <td><%= link_to "Edit", edit_admin_user_path({:id => entry.id})%></td>
                            </tr>
                            <% end %>
                        <% else %>
                            <tr>
                                <td colspan= <%= @field_map.keys.size+1%> >No Entries Found</td>
                            </tr>
                        <% end %>
                    </tbody>
                </table>
            </div>
        </div>
    <% end %>
</div>

<script>
    function addCustomQuery(e)
    {
        let tr = e.target.closest('tr')//this is tr tag that contains button and hidden input counter
        let num_customs = parseInt(tr.querySelector('input').value)
        tr.querySelector('input').value = num_customs + 1; //increment converted int
        let tbody = tr.parentNode;
        let trs = tbody.children;
        let clone = trs[Math.max(0,trs.length-2)].cloneNode(true);
        let regex = /(\[\d+\])/g;
        let clone_inps = clone.querySelectorAll('input');
        let clone_sels = clone.querySelectorAll('select');
        //clone will retain previous index. We will retrieve it and replace with incremented
        let index = JSON.parse(clone_inps[0].getAttribute('name').match(regex))[0];
        let name; 
        let id;
        for(let i = 0; i < clone_inps.length; i++) //Doesn't matter which since both arraylikes are 1 to 1
        {
            //Modifying inputs
            clone_inps[i].value='';
            clone_inps[i].removeAttribute('value');

            [clone_inps, clone_sels].forEach(arr => 
            {
                name = arr[i].getAttribute('name');
                id = arr[i].getAttribute('id');
                arr[i].setAttribute('name', name.replace(regex,`[${index + 1}]`)); //incremented indices
                arr[i].setAttribute('id', id.replace(regex,`[${index + 1}]`));
            });
        };
        tbody.insertBefore(clone, tr);
    };

    function clearCustomQuery(e)
    {
        let form = e.target.closest('form');
        let inps = form.querySelectorAll('input:not([type="submit"])');
        inps.forEach(element => {
            element.value='';
            element.removeAttribute('value');
        });
    }
</script>